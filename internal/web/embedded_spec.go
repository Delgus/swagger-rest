// Code generated by go-swagger; DO NOT EDIT.

package web

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "library",
    "version": "0.0.1"
  },
  "paths": {
    "/books": {
      "get": {
        "summary": "Get all books",
        "parameters": [
          {
            "type": "string",
            "description": "Author for search book",
            "name": "author",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Title for search book",
            "name": "title",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ArrayOfBooks"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update a book by ID",
        "parameters": [
          {
            "description": "The book to create.",
            "name": "book",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "summary": "Create a new book.",
        "parameters": [
          {
            "description": "The book to create.",
            "name": "book",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/books/{bookID}": {
      "get": {
        "summary": "Get a book by ID",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a book by ID",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "parameters": [
        {
          "minimum": 1,
          "type": "integer",
          "description": "Numeric ID of the book to get",
          "name": "bookID",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "ArrayOfBooks": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Book"
      },
      "example": [
        {
          "author": "Puskin",
          "id": 1,
          "title": "Skazki"
        },
        {
          "author": "Krilov",
          "id": 2,
          "title": "Basni"
        }
      ]
    },
    "Book": {
      "type": "object",
      "required": [
        "author",
        "title",
        "id"
      ],
      "properties": {
        "author": {
          "description": "The author name of the book",
          "type": "string"
        },
        "id": {
          "description": "ID of the book",
          "type": "integer",
          "minimum": 1
        },
        "title": {
          "description": "The book title",
          "type": "string"
        }
      },
      "example": {
        "author": "Puskin",
        "id": 1,
        "title": "Skazki"
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "library",
    "version": "0.0.1"
  },
  "paths": {
    "/books": {
      "get": {
        "summary": "Get all books",
        "parameters": [
          {
            "type": "string",
            "description": "Author for search book",
            "name": "author",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Title for search book",
            "name": "title",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ArrayOfBooks"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update a book by ID",
        "parameters": [
          {
            "description": "The book to create.",
            "name": "book",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "summary": "Create a new book.",
        "parameters": [
          {
            "description": "The book to create.",
            "name": "book",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/books/{bookID}": {
      "get": {
        "summary": "Get a book by ID",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a book by ID",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "parameters": [
        {
          "minimum": 1,
          "type": "integer",
          "description": "Numeric ID of the book to get",
          "name": "bookID",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "ArrayOfBooks": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Book"
      },
      "example": [
        {
          "author": "Puskin",
          "id": 1,
          "title": "Skazki"
        },
        {
          "author": "Krilov",
          "id": 2,
          "title": "Basni"
        }
      ]
    },
    "Book": {
      "type": "object",
      "required": [
        "author",
        "title",
        "id"
      ],
      "properties": {
        "author": {
          "description": "The author name of the book",
          "type": "string"
        },
        "id": {
          "description": "ID of the book",
          "type": "integer",
          "minimum": 1
        },
        "title": {
          "description": "The book title",
          "type": "string"
        }
      },
      "example": {
        "author": "Puskin",
        "id": 1,
        "title": "Skazki"
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        }
      }
    }
  }
}`))
}
